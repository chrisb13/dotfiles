#!/bin/bash
#netCDF helpers
function nc() #file header info ncdump
{
    ncdump -c ${1} | less
}

function ncv() #variable info ncdump
{
    ncdump -v ${2} ${1} | less
}

#use imagemagick to put a textbox with filename
function tbox() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   tbox FILE_NAME(S)" 
        echo "Purpose: to insert file path at bottom of file name."
        echo "       " 
        return 1
    fi

    for i in $* 
    do
        echo "Adding file path to: ${i}"
        width=`identify -format %w ${i}`
        cap=`readlink -e ${i}|tr -d '\n'`
        convert -background '#0008' -fill white -gravity center -size ${width}x100 caption:"${cap}" ${i} +swap -gravity south -composite  ${i}
    done
}


function tboxtext() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   tboxtext FILE_NAME 'caption'" 
        echo "Purpose: to insert caption text at bottom of file name."
        echo "       " 

        return 1
    fi
    echo "Adding text : ${2}"
    width=`identify -format %w ${1}`
    convert -background '#0008' -fill white -gravity center -size ${width}x100 caption:"${2}" ${1} +swap -gravity south -composite  ${1}
}

#rsync function for watching a storm folder and pulling plots
function stormpullwatch()
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   stormpullwatch PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from storm at 30 second intervals." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on Maelstrom to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "stormpullwatch /home/z3457920/hdrive/repos/cms_analysis/*.py ./temp"
        echo "       " 
        echo "Becomes:" 
        echo "    while true"
        echo "    echo 'Pulling from storm again'"
        echo "        do rsync -avz --progress z3457920@maelstrom.ccrc.unsw.edu.au:$/home/z3457920/hdrive/repos/cms_analysis/*.py ./temp" 
        echo "    sleep 30"
        echo "    done"
        return 1
    fi
while true
echo "Pulling from storm again"
    do rsync -avz --progress z3457920@maelstrom.ccrc.unsw.edu.au:$* 
sleep 30
done
}

#rsync functions for grabbing
#bash function to grab passed files into hdrive at UNSW
function stormpull()
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   stormpull PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from storm." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on Maelstrom to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "stormpull /home/z3457920/hdrive/repos/cms_analysis/*.py ./temp"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress z3457920@maelstrom.ccrc.unsw.edu.au:/home/z3457920/hdrive/repos/cms_analysis/*.py ./temp"

        return 1
    fi
    rsync -avz --progress z3457920@maelstrom.ccrc.unsw.edu.au:$* 
}


function stormpush()
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   stormpush PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to push files to storm." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on Maelstrom to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "stormpush ./temp/* /home/z3457920/hdrive/repos/cms_analysis/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* z3457920@maelstrom.ccrc.unsw.edu.au:/home/z3457920/hdrive/repos/cms_analysis/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    #grabs all arguments but the last one...
    #echo ${@:1:$(($#-1))}

    rsync -avz --progress ${@:1:$(($#-1))} z3457920@maelstrom.ccrc.unsw.edu.au:$last
}


function pushit() #bash command to push file into hdrive at UNSW
{
    rsync -avz $* z3457920@squall.ccrc.unsw.edu.au:/home/z3457920/hdrive/
}

function ncipushshort() #bash command to push file(s) into short on NCI
{
    rsync -avPS $* cyb561@raijin.nci.org.au:/short/e14/cyb561/
}

#bash command to push file(s) into NCI
function ncipush() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   ncipush PATH_FROM PATH_TO ." 
        echo "Purpose: rsync function to push files to NCI." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from:   Path on local to Rsync from" 
        echo "path_to: Path on NCI to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "ncipush ./temp/* /short/e14/cyb561/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* cyb561@r-dm.nci.org.au:/short/e14/cyb561/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    rsync -avS --progress ${@:1:$(($#-1))} cyb561@r-dm.nci.org.au:$last
}

#bash command to pull file(s) into NCI
function ncipull() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   ncipull PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from nci." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on nci to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "ncipull /short/e14/cyb561/*.py ./temp/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress cyb561@r-dm.nci.org.au:/short/e14/cyb561/*.py  ./temp/"

        return 1
    fi

    rsync -avS --progress cyb561@r-dm.nci.org.au:$* 
}




#bash command to push file(s) into  massdata
function mdsspush() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   mdsspush PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to push files to NCI's massdata." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on massdata NCI to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "mdsspush ./temp/* /massdata/e14/cyb561/now/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* cyb561@dc-dm3.nci.org.au:/massdata/e14/cyb561/now/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    rsync -avS --progress ${@:1:$(($#-1))} cyb561@dc-dm3.nci.org.au:$last
}

#bash command to pull file(s) into massdata
function mdsspull() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   mdsspull PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from NCI's massdata." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on massdata NCI to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "mdsspull /massdata/e14/cyb561/now/*.py ./temp/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress cyb561@dc-dm3.nci.org.au:/massdata/e14/cyb561/now/*.py  ./temp/"

        return 1
    fi

    rsync -avS --progress cyb561@dc-dm3.nci.org.au:$* 
}


#bash command to push file(s) onto ARCHER (UK)
function arcpush() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   arcpush PATH_FROM PATH_TO ." 
        echo "Purpose: rsync function to push files to archer." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from:   Path on local to Rsync from" 
        echo "path_to: Path on archer to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "arcpush ./temp/* /short/e14/cyb561/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* chbull@login.archer.ac.uk:/massdata/e14/cyb561/now/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    rsync -avS --progress ${@:1:$(($#-1))} chbull@login.archer.ac.uk:$last
}

function arcdacpush() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   arcdacpush PATH_FROM PATH_TO ." 
        echo "Purpose: rsync function to push files to archer." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from:   Path on local to Rsync from" 
        echo "path_to: Path on archer to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "arcdacpush ./temp/* /short/e14/cyb561/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* chbull@login.rdf.ac.uk:/massdata/e14/cyb561/now/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    rsync -avS --progress ${@:1:$(($#-1))} chbull@login.dac.ac.uk:$last
}


#rsync functions for grabbing
#bash function to grab passed files from ARCHER
function arcpull()
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   arcpull PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from ARCHER." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on Maelstrom to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "arcpull /users/chbull/temp/*.png ./temp"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress chbull@login.archer.ac.uk:/users/chbull/temp/*.png ./temp"

        return 1
    fi
    rsync -avz --progress chbull@login.archer.ac.uk:$* 
}

#rsync functions for grabbing
#bash function to grab passed files from BAS cluster
function bcpull()
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   bcpull PATH_FROM PATH_TO." 
        echo "Purpose: rsync function to pull files from BC." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from: Path on Maelstrom to Rsync from" 
        echo "path_to:   Path on local to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "bcpull /users/chbull/temp/*.png ./temp"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress chbull@bslcenb.nerc-bas.ac.uk:/users/chbull/temp/*.png ./temp"

        return 1
    fi
    rsync -avz --progress chbull@bslcenb.nerc-bas.ac.uk:$* 
}


#bash command to push file(s) onto BAS (UK)
function bcpush() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   bcpush PATH_FROM PATH_TO ." 
        echo "Purpose: rsync function to push files to BAS." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path_from:   Path on local to Rsync from" 
        echo "path_to: Path on bas to Rsync to" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "bcpush ./temp/* /short/e14/cyb561/"
        echo "       " 
        echo "Becomes:" 
        echo "rsync -avz --progress ./temp/* chbull@bslcenb.nerc-bas.ac.uk:/massdata/e14/cyb561/now/"

        return 1
    fi
    #grabs last passed argument..
    for last; do true; done

    #rsync -avS --progress ${@:1:$(($#-1))} chbull@bslcenb.nerc-bas.ac.uk:$last
    rsync -avS --progress ${@:1:$(($#-1))} chbull@bslcenb.nerc-bas.ac.uk:$last
}



#vim netrw plugin for various servers...
function vimbc() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimnci PATH_TO." 
        echo "Purpose: Allows remote editing of files on BAS servers..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimnci /users/chbull/repos/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://chbull@bslcenb.nerc-bas.ac.uk//users/chbull/repos/"

        return 1
    fi
    #number of arguments...
    #echo $#
    if [ $# == 1 ]
      then
        vim scp://chbull@bslcenb.nerc-bas.ac.uk/${1} 
    fi

    if [ $# == 2 ]
      then
        vim -O scp://chbull@bslcenb.nerc-bas.ac.uk/${1}  scp://chbull@bslcenb.nerc-bas.ac.uk/${2} 
    fi

    if [ $# == 3 ]
      then
        vim -O scp://chbull@bslcenb.nerc-bas.ac.uk/${1} scp://chbull@bslcenb.nerc-bas.ac.uk/${2} scp://chbull@bslcenb.nerc-bas.ac.uk/${3}  
    fi

    if [ $# > 3 ]
      then
        echo 'you passed too many arguments!'
    fi
}


function vimarc() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimnci PATH_TO." 
        echo "Purpose: Allows remote editing of files on ARCHER ..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimnci /users/chbull/repos/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://chbull@login.archer.ac.uk//users/chbull/repos/"

        return 1
    fi
    #number of arguments...
    #echo $#
    if [ $# == 1 ]
      then
        vim scp://chbull@login.archer.ac.uk/${1} 
    fi

    if [ $# == 2 ]
      then
        vim -O scp://chbull@login.archer.ac.uk/${1}  scp://chbull@login.archer.ac.uk/${2} 
    fi

    if [ $# == 3 ]
      then
        vim -O scp://chbull@login.archer.ac.uk/${1} scp://chbull@login.archer.ac.uk/${2} scp://chbull@login.archer.ac.uk/${3}  
    fi

    if [ $# > 3 ]
      then
        echo 'you passed too many arguments!'
    fi
}

function varc() #grab path from clipboard and edit using archer
{
    OUTPUT="$(xclip -o -selection clipboard)"
    echo "Executing: vim scp://chbull@login.archer.ac.uk/${OUTPUT}"
    vim scp://chbull@login.archer.ac.uk/${OUTPUT} 
}


function vbas() #grab path from clipboard and edit using bas cluster
{
    OUTPUT="$(xclip -o -selection clipboard)"
    echo "Executing: vim scp://chbull@bslcenc.nerc-bas.ac.uk/${OUTPUT}"
    
    vim scp://chbull@bslcenc.nerc-bas.ac.uk/${OUTPUT} 
}


#vim netrw plugin for various servers...
function vimnci() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimnci PATH_TO." 
        echo "Purpose: Allows remote editing of files on nci servers..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimnci /home/561/cyb561/repos/scripts_not_in_repo/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://cyb561@raijin.nci.org.au//home/561/cyb561/repos/scripts_not_in_repo/"

        return 1
    fi
    #number of arguments...
    #echo $#
    if [ $# == 1 ]
      then
        vim scp://cyb561@raijin.nci.org.au/${1} 
    fi

    if [ $# == 2 ]
      then
        vim -O scp://cyb561@raijin.nci.org.au/${1}  scp://cyb561@raijin.nci.org.au/${2} 
    fi

    if [ $# == 3 ]
      then
        vim -O scp://cyb561@raijin.nci.org.au/${1} scp://cyb561@raijin.nci.org.au/${2} scp://cyb561@raijin.nci.org.au/${3}  
    fi

    if [ $# > 3 ]
      then
        echo 'you passed too many arguments!'
    fi
}


function vimstormsimple() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimstorm PATH_TO." 
        echo "Purpose: Allows remote editing of files on CCRC storm servers..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "This is useful for zsh which doesn't like my fancier bash function." 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimstorm /home/z3457920/hdrive/repos/cms_analysis/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://z3457920@maelstrom.ccrc.unsw.edu.au//home/z3457920/hdrive/repos/cms_analysis/"

        return 1
    fi

    #number of arguments...
    #echo $#
    vim scp://z3457920@maelstrom.ccrc.unsw.edu.au/${1} 

}


function vimstorm() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimstorm PATH_TO." 
        echo "Purpose: Allows remote editing of files on CCRC storm servers..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimstorm /home/z3457920/hdrive/repos/cms_analysis/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://z3457920@maelstrom.ccrc.unsw.edu.au//home/z3457920/hdrive/repos/cms_analysis/"

        return 1
    fi

    #number of arguments...
    #echo $#
    if [ $# == 1 ]
      then
        vim scp://z3457920@maelstrom.ccrc.unsw.edu.au/${1} 
    fi

    if [ $# == 2 ]
      then
        vim -O scp://z3457920@maelstrom.ccrc.unsw.edu.au/${1}  scp://z3457920@maelstrom.ccrc.unsw.edu.au/${2} 
    fi

    if [ $# == 3 ]
      then
        vim -O scp://z3457920@maelstrom.ccrc.unsw.edu.au/${1} scp://z3457920@maelstrom.ccrc.unsw.edu.au/${2} scp://z3457920@maelstrom.ccrc.unsw.edu.au/${3}  
    fi

    if [ $# > 3 ]
      then
        echo 'you passed too many arguments!'
    fi

}

function vimmdss() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:   vimmdss PATH_TO." 
        echo "Purpose: Allows remote editing of files on CCRC storm servers..." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "path or file: vim will either edit or open file passed" 
        echo "       " 
        echo "Example." 
        echo "This:" 
        echo "vimmdss /massdata/e14/cyb561/now/"
        echo "       " 
        echo "Becomes:" 
        echo "vim scp://cyb561@dc-dm3.nci.org.au//massdata/e14/cyb561/now/"

        return 1
    fi

    vim scp://cyb561@dc-dm3.nci.org.au/${1} 

}

function findtype() 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: findtype TYPE" 
        echo "Purpose: searches for files with TYPE." 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "TYPE: file type " 
        echo "       " 
        echo "Example." 
        echo "findtype *.txt" 

        return 1
    fi

    find . -type f -name "${1}" 

}


function htopfind() 
{
    #stolen from: http://stackoverflow.com/questions/3727793/limit-the-output-of-the-top-command-to-a-specific-process-name
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: htopfind PROCESS_NAME" 
        echo "Purpose: displays a filtered list of htop on the process you search for." 
        echo "       " 
        echo "Requires: htop" 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "PROCESS_NAME: string of process you want to find" 
        echo "       " 
        echo "Example." 
        echo "htopfind python" 
        echo "       " 
        echo "becomes:       " 
        echo 'htop -p `pgrep python | tr "\\n" "," | sed "s/,$//"`'

        return 1
    fi
  htop -p `pgrep ${1} | tr "\\n" "," | sed "s/,$//"`   
}
 
function topfind() 
{
    #stolen from: http://stackoverflow.com/questions/3727793/limit-the-output-of-the-top-command-to-a-specific-process-name
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: topfind PROCESS_NAME" 
        echo "Purpose: displays a filtered list of htop on the process you search for." 
        echo "       " 
        echo "Requires: top" 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "PROCESS_NAME: string of process you want to find" 
        echo "       " 
        echo "Example." 
        echo "topfind python" 
        echo "       " 
        echo "becomes:       " 
        echo 'top -p `pgrep python | tr "\\n" "," | sed "s/,$//"`'

        return 1
    fi
  top -p `pgrep ${1} | tr "\\n" "," | sed "s/,$//"`   
}

function log() #pbs log file
{
  less $(ls cb_rhomoc_katana.pbs.* |tail -1)
}


function g() #grab path 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: grab FILENAME_PATHNAME" 
        echo "Purpose: gets full path of file or path and places in clipboard." 
        echo "       " 
        echo "Requires: xclip" 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "FILENAME_PATHNAME: path to folder or file" 
        echo "       " 
        echo "Example." 
        echo "grab filename.txt" 
        echo "       " 
        echo "becomes:       " 
        echo "readlink -e filename.txt|tr -d '\n'|xclip -selection c"

        return 1
    fi
  readlink -e ${1}|tr -d '\n'|xclip -selection clipboard
}

function gvim() #grab path 
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: grab FILENAME_PATHNAME" 
        echo "Purpose: gets full path of file or path and places in clipboard with the full path to edit from vim." 
        echo "       " 
        echo "Requires: xclip" 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "FILENAME_PATHNAME: path to folder or file" 
        echo "       " 
        echo "Example." 
        echo "grab filename.txt" 
        echo "       " 
        echo "becomes:       " 
        echo "readlink -e filename.txt|tr -d '\n'|xclip -selection c"

        return 1
    fi
    OUTPUT="$(readlink -e ${1}|tr -d '\n')"
    echo "vim scp://z3457920@maelstrom.ccrc.unsw.edu.au/${OUTPUT}"
}


function loadnc() #load netcdf file in python
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage: loadnc FILENAME_PATHNAME" 
        echo "Purpose: loads path of file into ipython (creates loadvar.py in your current dir). Prints file info and available variables. 'ifile' is name of netCDF4 object." 
        echo "       " 
        echo "Requires: python netCDF4" 
        echo "       " 
        echo "Mandatory arguments: " 
        echo "FILENAME_PATHNAME: path to netCDF file" 
        echo "       " 
        echo "Example." 
        echo "loadnc netcdffilename.nc" 
        echo "loadnc /path/to/netcdffilename.nc" 
        echo "       " 

        return 1
    fi
  
OUTPUT="$(readlink -e ${1}|tr -d '\n')"
cat << EOF > loadvar.py
import os
import xarray as xr
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.ticker import MultipleLocator
infile='${OUTPUT}'
assert(os.path.exists(infile)),"netCDF file does not exist!"
ifile=xr.open_dataset(infile)
#varone=ifile['']
print ""
print "NetCDF file loaded with bash loadnc function..."
print os.path.basename(infile)
print ""
print "File Details"
print ifile

print ""
print "Variable Names: "
print ""
print ifile.variables.keys()
print ""

print ""
print "'ifile' is name of netCDF4 object... "
print ""

#plt.close('all')
#fig=plt.figure()
#ax=fig.add_subplot(1, 1,1)
##cs1=ax.contourf()
#plt.colorbar(cs1,cax=make_axes_locatable(ax).append_axes("bottom", size="5%", pad=0.25),orientation='horizontal')
#plt.show()
EOF
ipython -i loadvar.py
}


function ll ()
{
clear;
tput cup 0 0;
ls --color=auto -F --color=always -lhFrt;
tput cup 40 0;
}


#nci mass data helpers
function mdi() #insert argument for mass data on nci
{
    mdss ls cyb561/now/input/${1}
}

function mdo() #insert argument for mass data on nci
{
    mdss ls cyb561/now/output/${1}
}

function mdr() #insert argument for mass data on nci
{
    mdss ls cyb561/now/restart/${1}
}

function mddu() #insert argument for mass data on nci
{
    mdss dmdu -ch cyb561/now/output/${1}
}

function qmeless()
{
    echo "Running jobs on ARCHER..."
    OUTPUT0=$(qstat -u chbull)
    echo "$OUTPUT0"
    echo ""
    echo "Getting path of running jobs on ARCHER..."
    # go to scheduler and getting running jobs..
    OUTPUT="$(qstat -u chbull|grep chbull| cut -c1-11)"
    echo "--"
    while read -r OUTPUT; do
        que=$(qstat -f ${OUTPUT}|grep -A 1 Output_Path|tr -d '\040\011\012\015')
        que2=$(dirname $que |sed 's/^.*://'|sed 's/\r$//')

        echo $OUTPUT":" $que2 
    done <<< "$OUTPUT"
    echo ""
}


function qmemore()
{
    echo "Running jobs on ARCHER..."
    OUTPUT0=$(qstat -u chbull)
    echo "$OUTPUT0"
    echo ""
    echo "Getting path of running jobs on ARCHER..."
    # go to scheduler and getting running jobs..
    OUTPUT="$(qstat -u chbull|grep chbull| cut -c1-11)"
    echo "--"
    while read -r OUTPUT; do
        que=$(qstat -f ${OUTPUT}|grep -A 1 Output_Path|tr -d '\040\011\012\015')
        que2=$(dirname $que |sed 's/^.*://'|sed 's/\r$//')

        #rn_rdt=$(grep 'rn_rdt' $que2/namelist_cfg | head -n 1 |  cut -c1-30 | grep -o -E '[0-9]+ | head -n 1')
        #rn_rdt=720.
	rn_rdt=`cat $que2/qme`

        echo $OUTPUT":" $que2 ". rn_rdt:" $rn_rdt
        desc=$(grep 'Desc' $que2/README)
	echo "$desc"
	echo $OUTPUT" (days / years) :";cat $que2/time.step | while read word; do python -c "print $word*$rn_rdt/(60*60*24)"; done  
	cat $que2/time.step | while read word; do python -c "print $word*$rn_rdt/(60*60*24*365.0)"; done  
	grep -A 4 'E R R' $que2/ocean.output
        echo "--"
    done <<< "$OUTPUT"
    echo ""
}

function rdfstat() # progress of nemo experiments
{
for f in /nerc/n02/n02/chbull/RawData/NEMO/nemo_WED025_*; do
	var=`du $f/???? | wc -l`
	echo "Exp: -> $f ${var} years"
done
}

function mnemo() #compile NEMO on archer with passed config
{
    if [[ ( $# -eq 0 ) || ( $1 == "--help" ) || ( $1 == "-h" ) ]] ; then
        echo "Usage:  mnemo CONFIG" 
        echo "Purpose: compile NEMO on archer with passed config., i.e., ./makenemo -n CONFIG -m XC_ARCHER_INTEL -j 8" 
        echo "       " 
        return 1
    fi
    ./makenemo -n ${1} -m XC_ARCHER_INTEL -j 8
}

function ncinemostat()
{

    echo "Getting status of running nemo jobs."
    echo ""

    # go to scheduler and getting running jobs..
    OUTPUT="$(qstat -u cyb561 | grep run_nemo)"
    while read -r OUTPUT; do
        echo "Job ... "
        echo "    ... $OUTPUT..."
        echo ""

        # get jobid
        runme="$(echo $OUTPUT | head -n1 | awk '{print $1;}')"

        echo "    JobID found is: "
        echo "    ${runme}"
        #echo ""
        # ask qstat for fulld etails | find working dir | find bit after run command | chop out ',' at the end
        #runmetwo="$(qstat -f ${runme}|grep PBS_O_WORKDIR| sed 's/.*run//'| sed '$s/.$//')"
        
        # ask qstat for fulld etails | find working dir | find bit after run command 
        #runmetwo="$(qstat -f ${runme}|grep PBS_O_WORKDIR| sed 's/.*run//'| sed '$s/.$//')"
        runmetwo="$(qstat -f ${runme}|grep PBS_O_WORKDIR| sed 's/.*run//')"
        
        echo "    Mass Data has: "
        echo ${runmetwo}
        # get mass data contents
        #
        runmethree="$(mdss dmdu -ch cyb561/now/output${runmetwo}  < /dev/null)"
        echo "      "
        echo "    ${runmethree}"
        echo ""
        done <<< "$OUTPUT"
}


function makepy ()
{
pipfreeze=$(pip freeze | sed 's/^/##   /')
modulelist_storm=$(module list 2>&1 | sed 's/^/# /')
modulelist_katana=$(module list |& sed 's/^/# /')
cat > ${1}.py <<EOF
##   Author: Christopher Bull. 
##   Affiliation: Climate Change Research Centre and ARC Centre of Excellence for Climate System Science.
##                Level 4, Mathews Building
##                University of New South Wales
##                Sydney, NSW, Australia, 2052
##   Contact: z3457920@student.unsw.edu.au
##   www:     christopherbull.com.au
##   twitter: @@ChrisBullOceanO
##   Date created: $(date)
##   Machine created on: $(hostname)
##

"""
This file is for 

"""


#
#python logging
import logging as lg
import time
#import os

#import sys

#sys.path.insert(1,'/home/z3457920/hdrive/repos/cms_analysis/')
from cb2logger import *

#If you want to log to a file you need to put this before you import swissarmy!
#LogStart(sys.argv[0]+ '.log',fout=True)

#sys.path.insert(1,'/home/z3457920/hdrive/repos/')
#import swissarmy as sa

if __name__ == "__main__":                                     #are we being run directly?
    LogStart('',fout=False)

    #PUT wothwhile code here!

    #sa.mkdir('./blah3/')

    lg.info('')
    localtime = time.asctime( time.localtime(time.time()) )
    lg.info("Local current time : "+ str(localtime))
    lg.info('SCRIPT ended')

EOF
vi ${1}.py
}

